{"ast":null,"code":"import axios from \"axios\";\nimport { url } from \"./API\";\nimport jwtDecode from \"jwt-decode\";\nconst {\n  createSlice,\n  createAsyncThunk\n} = require(\"@reduxjs/toolkit\");\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  name: \"\",\n  email: \"\",\n  id: \"\",\n  registerStatus: \"\",\n  registerError: \"\",\n  loginStatus: \"\",\n  loginError: \"\",\n  userLoaded: false\n};\nexport const register = createAsyncThunk(\"auth/register\", async (values, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    const token = await axios.post(`${url}/register`, {\n      name: values.name,\n      email: values.email,\n      password: values.password\n    });\n    localStorage.setItem(\"token\", token.data);\n    return token.data;\n  } catch (error) {\n    console.log(error.response.data);\n    return rejectWithValue();\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(regis.pending, (state, action) => {\n      return {\n        ...state,\n        registerStatus: \"pending\"\n      };\n    });\n    builder.addCase(registerStatus.fulfilled, (state, action) => {\n      if (action.payload) {\n        const user = jwtDecode(action.payload);\n        return {\n          ...state,\n          token: action.payload,\n          name: user.name,\n          email: user.email,\n          id: user.id,\n          registerStatus: \"success\"\n        };\n      } else return state;\n    });\n    builder.addCase(registerStatus.reject, (state, action) => {\n      return {\n        ...state,\n        registerStatus: \"rejected\",\n        registerError: action.payload\n      };\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["axios","url","jwtDecode","createSlice","createAsyncThunk","require","initialState","token","localStorage","getItem","name","email","id","registerStatus","registerError","loginStatus","loginError","userLoaded","register","values","_ref","rejectWithValue","post","password","setItem","data","error","console","log","response","authSlice","reducers","extraReducers","builder","addCase","regis","pending","state","action","fulfilled","payload","user","reject","reducer"],"sources":["/Users/nivporat/Desktop/mepelaozen/src/components/store/AuthSlice.js"],"sourcesContent":["import axios from \"axios\";\nimport { url } from \"./API\";\nimport jwtDecode from \"jwt-decode\";\n\nconst { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\n\n\nconst initialState = {\n    token: localStorage.getItem(\"token\"),\n    name:\"\",\n    email:\"\",\n    id:\"\",\n    registerStatus:\"\",\n    registerError:\"\",\n    loginStatus:\"\",\n    loginError:\"\",\n    userLoaded:false,\n}\n\n\n\nexport const register =  createAsyncThunk(\n    \"auth/register\",\n   async (values,{rejectWithValue}) => {\n        try {\n        const token = await axios.post(`${url}/register`,{\n                name:values.name,\n                email:values.email,\n                password:values.password\n            })\n            localStorage.setItem(\"token\",token.data)    \n            return token.data\n        } catch (error) {\n            console.log(error.response.data)\n           return rejectWithValue()\n        }\n    }\n)\n\n\n\nconst authSlice = createSlice({\n    name:\"auth\",\n    initialState,\n    reducers:{\n\n    },\n\n    extraReducers:(builder)=>{\n        builder.addCase(regis.pending,(state,action)=>{\n                return { ...state,registerStatus:\"pending\"}\n        })\n\n        builder.addCase(registerStatus.fulfilled,(state,action)=>{\n            if(action.payload){\n                const user = jwtDecode(action.payload)\n                    return{\n                        ...state,\n                        token:action.payload,\n                        name:user.name,\n                        email:user.email,\n                        id:user.id,\n                        registerStatus:\"success\"\n                    }\n            }else return state\n        })\n\n\n        builder.addCase(registerStatus.reject,(state,action)=>{\n            return{\n                ...state,\n                registerStatus:\"rejected\",\n                registerError:action.payload\n            }\n        })\n    }\n})\n\n\n\nexport default authSlice.reducer"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,OAAO;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAM;EAAEC,WAAW;EAAEC;AAAiB,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAGrE,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCC,IAAI,EAAC,EAAE;EACPC,KAAK,EAAC,EAAE;EACRC,EAAE,EAAC,EAAE;EACLC,cAAc,EAAC,EAAE;EACjBC,aAAa,EAAC,EAAE;EAChBC,WAAW,EAAC,EAAE;EACdC,UAAU,EAAC,EAAE;EACbC,UAAU,EAAC;AACf,CAAC;AAID,OAAO,MAAMC,QAAQ,GAAId,gBAAgB,CACrC,eAAe,EAChB,OAAOe,MAAM,EAAAC,IAAA,KAAuB;EAAA,IAAtB;IAACC;EAAe,CAAC,GAAAD,IAAA;EAC1B,IAAI;IACJ,MAAMb,KAAK,GAAG,MAAMP,KAAK,CAACsB,IAAI,CAAE,GAAErB,GAAI,WAAU,EAAC;MACzCS,IAAI,EAACS,MAAM,CAACT,IAAI;MAChBC,KAAK,EAACQ,MAAM,CAACR,KAAK;MAClBY,QAAQ,EAACJ,MAAM,CAACI;IACpB,CAAC,CAAC;IACFf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAACjB,KAAK,CAACkB,IAAI,CAAC;IACxC,OAAOlB,KAAK,CAACkB,IAAI;EACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,QAAQ,CAACJ,IAAI,CAAC;IACjC,OAAOJ,eAAe,EAAE;EAC3B;AACJ,CAAC,CACJ;AAID,MAAMS,SAAS,GAAG3B,WAAW,CAAC;EAC1BO,IAAI,EAAC,MAAM;EACXJ,YAAY;EACZyB,QAAQ,EAAC,CAET,CAAC;EAEDC,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CAACC,OAAO,CAACC,KAAK,CAACC,OAAO,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACtC,OAAO;QAAE,GAAGD,KAAK;QAACxB,cAAc,EAAC;MAAS,CAAC;IACnD,CAAC,CAAC;IAEFoB,OAAO,CAACC,OAAO,CAACrB,cAAc,CAAC0B,SAAS,EAAC,CAACF,KAAK,EAACC,MAAM,KAAG;MACrD,IAAGA,MAAM,CAACE,OAAO,EAAC;QACd,MAAMC,IAAI,GAAGvC,SAAS,CAACoC,MAAM,CAACE,OAAO,CAAC;QAClC,OAAM;UACF,GAAGH,KAAK;UACR9B,KAAK,EAAC+B,MAAM,CAACE,OAAO;UACpB9B,IAAI,EAAC+B,IAAI,CAAC/B,IAAI;UACdC,KAAK,EAAC8B,IAAI,CAAC9B,KAAK;UAChBC,EAAE,EAAC6B,IAAI,CAAC7B,EAAE;UACVC,cAAc,EAAC;QACnB,CAAC;MACT,CAAC,MAAK,OAAOwB,KAAK;IACtB,CAAC,CAAC;IAGFJ,OAAO,CAACC,OAAO,CAACrB,cAAc,CAAC6B,MAAM,EAAC,CAACL,KAAK,EAACC,MAAM,KAAG;MAClD,OAAM;QACF,GAAGD,KAAK;QACRxB,cAAc,EAAC,UAAU;QACzBC,aAAa,EAACwB,MAAM,CAACE;MACzB,CAAC;IACL,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAIF,eAAeV,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}