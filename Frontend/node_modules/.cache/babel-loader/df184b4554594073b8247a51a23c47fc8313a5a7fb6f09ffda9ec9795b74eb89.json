{"ast":null,"code":"// import axios from \"axios\";\n// import { url } from \"./API\";\n// import jwtDecode from \"jwt-decode\";\n\n// const { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\n\n//  const initialState = {\n//     token: localStorage.getItem(\"token\"),\n//     name:\"\",\n//     email:\"\",\n//     id:\"\",\n//     registerStatus:\"\",\n//     registerError:\"\",\n//     loginStatus:\"\",\n//     loginError:\"\",\n//     userLoaded:false,\n// }\n\n// export const register =  createAsyncThunk(\n//     \"auth/register\",\n//    async (values,{rejectWithValue}) => {\n//         try {\n//         const token = await axios.post(`${url}/register`,{\n//                 name:values.name,\n//                 email:values.email,\n//                 password:values.password\n//             })\n//             localStorage.setItem(\"token\",token.data)    \n//             return token.data\n//         } catch (error) {\n//             console.log(error.response.data)\n//            return rejectWithValue()\n//         }\n//     }\n// )\n\n// const authSlice = createSlice({\n//     name:\"auth\",\n//     initialState,\n//     reducers:{\n\n//     },\n\n//     extraReducers:(builder)=>{\n//         builder.addCase(registerStatus.pending,(state,action)=>{\n//                 return { ...state,registerStatus:\"pending\"}\n//         })\n\n//         builder.addCase(registerStatus.fulfilled,(state,action)=>{\n//             if(action.payload){\n//                 const user = jwtDecode(action.payload)\n//                     return{\n//                         ...state,\n//                         token:action.payload,\n//                         name:user.name,\n//                         email:user.email,\n//                         id:user.id,\n//                         registerStatus:\"success\"\n//                     }\n//             }else return state\n//         })\n\n//         builder.addCase(registerStatus.reject,(state,action)=>{\n//             return{\n//                 ...state,\n//                 registerStatus:\"rejected\",\n//                 registerError:action.payload\n//             }\n//         })\n//     }\n// })\n\n// export default authSlice.reducer","map":{"version":3,"names":[],"sources":["/Users/nivporat/Desktop/mepelaozen/src/components/store/AuthSlice.js"],"sourcesContent":["// import axios from \"axios\";\n// import { url } from \"./API\";\n// import jwtDecode from \"jwt-decode\";\n\n// const { createSlice, createAsyncThunk } = require(\"@reduxjs/toolkit\");\n\n\n//  const initialState = {\n//     token: localStorage.getItem(\"token\"),\n//     name:\"\",\n//     email:\"\",\n//     id:\"\",\n//     registerStatus:\"\",\n//     registerError:\"\",\n//     loginStatus:\"\",\n//     loginError:\"\",\n//     userLoaded:false,\n// }\n\n\n\n// export const register =  createAsyncThunk(\n//     \"auth/register\",\n//    async (values,{rejectWithValue}) => {\n//         try {\n//         const token = await axios.post(`${url}/register`,{\n//                 name:values.name,\n//                 email:values.email,\n//                 password:values.password\n//             })\n//             localStorage.setItem(\"token\",token.data)    \n//             return token.data\n//         } catch (error) {\n//             console.log(error.response.data)\n//            return rejectWithValue()\n//         }\n//     }\n// )\n\n\n\n// const authSlice = createSlice({\n//     name:\"auth\",\n//     initialState,\n//     reducers:{\n\n//     },\n\n//     extraReducers:(builder)=>{\n//         builder.addCase(registerStatus.pending,(state,action)=>{\n//                 return { ...state,registerStatus:\"pending\"}\n//         })\n\n//         builder.addCase(registerStatus.fulfilled,(state,action)=>{\n//             if(action.payload){\n//                 const user = jwtDecode(action.payload)\n//                     return{\n//                         ...state,\n//                         token:action.payload,\n//                         name:user.name,\n//                         email:user.email,\n//                         id:user.id,\n//                         registerStatus:\"success\"\n//                     }\n//             }else return state\n//         })\n\n\n//         builder.addCase(registerStatus.reject,(state,action)=>{\n//             return{\n//                 ...state,\n//                 registerStatus:\"rejected\",\n//                 registerError:action.payload\n//             }\n//         })\n//     }\n// })\n\n\n\n// export default authSlice.reducer"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA"},"metadata":{},"sourceType":"module","externalDependencies":[]}